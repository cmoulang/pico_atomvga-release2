/*
 * PIO state machine programs for handling operations on the 6502 bus.
 */

// 6502 bus signals
.define public PIN_A0 2         ; also A8 or D0 depending on mux settings
.define public PIN_1MHZ 18
.define public PIN_R_NW 19

// mux control pins
.define public PIN_MUX_ADD_LOW 28
.define public PIN_MUX_ADD_HIGH 27
.define public PIN_MUX_DATA 26

// mux bit masks
.define ADLO 0b011
.define ADHI 0b101
.define DATA 0b110
.define NONE 0b111

.define ADDR_DELAY 8
.define MUX_DELAY 0

.program eb2_address
; calculates a 32-bit address from the 6502's 16-bit address and pushes it to the DMA channel
; DMA address = 0x20010000 + (6502_address * 2)
.side_set 3 opt
.wrap_target
loop:
        wait    1 gpio, PIN_1MHZ
        wait    0 gpio, PIN_1MHZ         ; wait for 1 -> 0
        set     pindirs, 0    side NONE  ; reset the mux
        set     y, ADDR_DELAY side ADHI  ; select A8-A15 on the mux
delay:  jmp     y--, delay
        set     x, 2
        in      pins, 8
        mov     osr, isr                 ; osr = A8-A15
        mov     isr, x
        jmp     pin a15       side ADLO
        set     x, 1
a15:    in      x, 12         [1]        ; isr = 0x2001 or 0x2002
        in      osr, 7        [1]        ; A8-A14
        in      pins, 8                  ; A0-A7
        in      null, 1       side NONE  ; auto push - 28 bits
.wrap


.program eb2_access
; receives a 16bit word containg read/write flags + data from DMA
; if read && read-eabled is set then outputs data to 6502 bus
; if write && not-wite-enabled is clear then gets data from 6502 bus and pushes to DMA
.side_set 3 opt
.wrap_target
loop:
        pull    block                    ; get the flags + data
        out     pins 8                   ; set up the data in case it's a read
        out     y, 1                     ; get the read-enabled flag
        jmp     pin, read
; Process 6502 write
        out     y, 1                     ; get the not-write-enabled flag
        jmp     y--, loop                ; jmp if no write access to this address
        wait 1 gpio PIN_1MHZ  side DATA
        wait 0 gpio PIN_1MHZ             ; wait for 1 -> 0
        in pins 8
        jmp     loop
read:
; Process 6502 read
        jmp     !y, loop                 ; jmp if no read access to this address
        mov     osr, !null
        out     pindirs 8     side DATA
.wrap

