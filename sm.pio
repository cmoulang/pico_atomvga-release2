/*
 * PIO state machine programs for handling operations on the 6502 bus.
 */

// 6502 bus signals
.define public PIN_A0 2         ; also A8 or D0 depending on mux settings
.define public PIN_1MHZ 18
.define public PIN_R_NW 19

// mux control pins
.define public PIN_MUX_ADD_LOW 28
.define public PIN_MUX_ADD_HIGH 27
.define public PIN_MUX_DATA 26

// mux bit masks
.define ADLO 0b011
.define ADHI 0b101
.define DATA 0b110
.define NONE 0b111

.define IRQ_ADHI_READY 4
.define IRQ_WRITE 5

.define ADDR_DELAY 9
.define MUX_DELAY 4

; eight-bit bus read
.program eb_read
    ; x = permission lookup table address - set in C
.side_set 3 opt
.wrap_target
loop:
    wait    1 gpio, PIN_1MHZ 
    wait    0 gpio, PIN_1MHZ            ; wait for 1 -> 0
    in      x 16                    [1] ; get upper 16 bits of lookup address
    set     pindirs, 0    side NONE     ; reset the mux
                    
public set_delay:                       ; Data field of instruction - modified by c
    set     y, ADDR_DELAY side ADHI            
delay:
    jmp     y--, delay    
    irq     clear IRQ_ADHI_READY    [1]
    in      pins, 8       side NONE     ; read A8-A15 
    set     y, MUX_DELAY  side ADLO
delay2:
    jmp     y--, delay2
    in      pins, 8                     ; read A0-A7, auto push
    pull    block                       ; get the flags
    out     y, 1                        ; get the read-enabled flag
    jmp     pin, read    side NONE
; Process 6502 write
    out     y, 1                        ; get the not-write-enabled flag
    pull    block                       ; discard the data from DMA
    jmp     y--, loop                   ; jmp if no write access to this address
    irq     clear IRQ_WRITE side DATA   ; it's a write
    jmp     loop
read:
; Process 6502 read
    pull    block                       ; get the data from DMA
    jmp     !y, loop                    ; jmp if no read access to this address
    out     pins 8 
    mov     osr, !null
    out     pindirs 8 side DATA
.wrap

.program eb_address
    ; x = memory address - set in C
.wrap_target
loop:
    in x 16
    irq wait IRQ_ADHI_READY
    in pins 8 [MUX_DELAY+2]
    in pins 8                       ; auto push
.wrap

.program eb_write
.wrap_target
    irq wait IRQ_WRITE [1]
    wait 1 gpio PIN_1MHZ
    wait 0 gpio PIN_1MHZ            ; wait for 1 -> 0
    in pins 8
.wrap
